[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "linkedin-scraper-mcp"
version = "1.0.0"
description = "A modern LinkedIn scraping library with CLI and MCP server"
authors = [
    {name = "Aman Kumar Singh", email = "amankumarsingh7702@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
keywords = ["linkedin", "scraping", "automation", "mcp", "cli"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Office/Business :: Professional Networks"
]
requires-python = ">=3.10"
dependencies = [
    "selenium>=4.35.0",
    "requests>=2.32.5",
    "python-dotenv>=1.0.0",
    "cyclopts>=2.0.0",
    "fastmcp>=0.1.0",
    "psutil>=5.9.0"
]


[project.optional-dependencies]
mcp = [
    "mcp>=1.0.0",
    "fastmcp>=2.12.2"
]
dev = [
    "pytest>=7.2.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.6.9",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0"
]
all = [
    "linkedin-scraper-mcp[mcp,dev]"
]

[project.urls]
Homepage = "https://github.com/vertexcover-io/linkedin-mcp-py"
Repository = "https://github.com/vertexcover-io/linkedin-mcp-py"
Issues = "https://github.com/vertexcover-io/linkedin-mcp-py/issues"
Documentation = "https://github.com/vertexcover-io/linkedin-mcp-py#readme"

[project.scripts]
linkedin_mcp = "mcp.__main__:app"

[project.entry-points."console_scripts"]
linkedin-mcp = "mcp.__main__:app"

[tool.setuptools.packages.find]
where = ["src", "."]
include = ["linkedin_scraper*", "cli*", "mcp*"]
exclude = ["tests*", "venv*", ".venv*", "__pycache__*"]

[tool.setuptools.package-data]
linkedin_scraper = ["py.typed"]
"*" = ["*.md", "*.txt", "*.yml", "*.yaml"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests"
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
files = ["src/linkedin_scraper", "cli", "mcp"]

[[tool.mypy.overrides]]
module = [
    "selenium.*",
    "undetected_chromedriver.*",
    "mcp.*",
    "cyclopts.*"
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py310"
line-length = 100
fix = true
select = [
    # Pyflakes
    "F",
    # Pycodestyle
    "E", "W",
    # isort
    "I",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # pyupgrade
    "UP",
    # flake8-comprehensions
    "C4",
    # flake8-bandit
    "S",
    # flake8-builtins
    "A",
    # tryceratops
    "TRY",
    # ruff
    "RUF"
]
ignore = [
    "E501",  # Line too long (handled by black)
    "S101",  # Use of assert
    "TRY003", # Avoid specifying long messages outside the exception class
    "B008",  # Do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["S101", "S106", "S108", "S311", "A001", "A002", "A003"]

[tool.ruff.isort]
known-first-party = ["linkedin_scraper", "cli", "mcp"]

[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.coverage.run]
source = ["src/linkedin_scraper", "cli", "mcp"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
